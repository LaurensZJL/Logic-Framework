/**
 * Title: A new IDP source file
 * Author: laurens.lemaire
 */
 
include <mx>

vocabulary V {
 	
    //----------------------------------------------------------------------------
    // General System Architecture
    //----------------------------------------------------------------------------	
  	
    //----------------------------------------------------------------------------
    // Components
    //----------------------------------------------------------------------------		
	
    // The system parts	
    type SystemPart
 	
    // The different components in the system
    type HardwareComponent isa SystemPart 
    Critical(HardwareComponent)
  
    // Modules
    type SoftwareModule isa SystemPart
    LocatedIn(SoftwareModule) : HardwareComponent
 	
    // HardwareComponent specs
	type VersionInt isa int
    type Version constructed from {Version(VersionInt), Version(VersionInt,VersionInt), Version(VersionInt,VersionInt,VersionInt), Version(VersionInt,VersionInt,VersionInt,VersionInt)}
    
    type Product constructed from {ABB_AC, ABB_SREA, Adcon_Telemetry, Adcon_Telemetry_addVANTAGE, Advantech_ADAM, Advantech_Broadwin_WebAccess, Advantech_ISSymbol_ActiveX, Advantech_Modbus_RTU, Advantech_Modbus_TCP, Advantech_Studio, Allied_Telesis_IE, ARC_Informatique_PcVue, Automated_Solutions, AzeoTech_DAQFactory, BB_ELECTRONICS_Conel, BB_ELECTRONICS_CR10, BB_ELECTRONICS_ER75i, BB_ELECTRONICS_LR77, BB_ELECTRONICS_SPECTRE, BB_ELECTRONICS_UCR11, BB_ELECTRONICS_UR5i, BB_ELECTRONICS_XR5i, Beckhoff_Automation_CX, Beckhoff_Automation_IPC, Beckhoff_TwinCAT, Bintec_Elmeg, Certec_atvise, Citect, CitectSCADA_Reports, CoDeSys_Web_Server, Contemporary_Control_Systems_BASRT, Cybectec_DNP3_Master_Server, Datasensor_UR5i, Deif_AWC, Digi_CM, Digi_Connect_WAN, Digi_Transport_WR, DigiOne_IAP_Serial, Ecava_IntegraXor, Echelon_iLON_Smartserver, Emerson_DL8000, Emerson_ROC800, Emerson_ROC800L, Emerson_ControlWave_Micro_Quick, Emerson_IPKVM_Avocent_MergePoint_Unity, Emerson_Ovation_DCS, Emerson_Smart_Wireless_Gateway, Endress_Hauser_Fieldgate_FXA, ENTES_EMG, eWON, Fultek_WinTr, Galil_RIO, Hirschmann_MACH, Hirschmann_MICE, Hirschmann_OCTOPUS, Hirschmann_RS, Hirschmann_RSP, IBM, ICONICS_Genesis32, ICONICS_Genesis64, Intellicom_NetBiter_webSCADA, IOServer, IRAI_AUTOMGEN, Kessler_Ellis_Infilink, Koyo_ECOM, Linksys_WRT, Macq, MatrikonOPC, MeasureSoft_ScadaPro, MICROSYS_PROMOTIC, Mitsubishi_MC_WorX_Suite, Mitsubishi_Qn, Moxa_Device_Manager, Moxa_EDS, Netcomm_Wireless, Nordex_Control_2, Omron_IA_CJ1M, Omron_NS, Open_Automation_Software_OPC_SystemsNET, Optima, Optima_APIFTP, Ouman_EHnet, Phasefale_Controls_JouleTemp, ProFace_GP, ProFace_ProServer_EX, Proficy, Progea_Movicon, Progea_Movicon_PowerHMI, Prosoft_Technology_ICX, QNX_Phditto, QNX_Phrelay, QNX_Phwindows, RealFlex_RealWin, Rockwell_Automation_ControlLogix, Rockwell_Automation_EDM, Rockwell_Automation_FactoryTalk, Rockwell_Automation_RADES, Rockwell_PLC5, RuggedCom, SAIA_PCD, Samsung_Integrated_Management_System_DMS, SCADA_Engine_BACnet, Scadatec_Limited_Procyon, ScadaTEC_Modbus_TagServer, Schneider_Electric_ETG, Schneider_Electric_M, Schneider_Electric_Modicon_M, Schneider_Electric_Modicon_Premium,  Schneider_Electric_Modicon_Quantum, Schneider_Electric_OPC_Factory_Server, Schneider_Electric_PM, Schneider_Electric_Powerlogic, Schneider_Electric_TSX_ETG, Schweitzer_SEL, Sielco_Sistemi_Winlog, Siemens_Climatix, Siemens_COMOS, Siemens_Ruggedcom, Siemens_S7, Siemens_Simatic_S7, Siemens_Scalance, Siemens_SIMATIC_WinCC, Siemens_SIMATIC_WinCC_Flexible_Runtime, Siemens_Tecnomatix_FactoryLink, SIMATIC_STEP_7, Sierra_Wireless_AirLink, SpecView, STIGSS, STTermis, Stulz_GmbH, Sunway_Force_Control, TAC_Xenta, Tecomat_Foxtrot, TOPServer, Triangle_Research_Nano_10, Turck_BL, Unitronics_UNIOPC_Server, Vijeo, WAGO_IO, WAGO_IPC, WellinTech_KingHistorian, WellinTech_KingSCADA, WellinTech_KingView, Westermo_MRD, Westermo_TDW, Wind_River_VxWorks, WindowsXP, Wonderware_InTouch, Wonderware_SuiteLink, xArrow}
 	
    ComponentSpec(HardwareComponent, Product, Version)
    ModuleSpec(SoftwareModule, Product, Version)
 	
    //----------------------------------------------------------------------------
    // Channels
    //----------------------------------------------------------------------------		
	
    // The different communication channels in the system
    type Channel
	
    type PhysicalChannel
    PhysicalConnection(HardwareComponent, PhysicalChannel, HardwareComponent)
    Path(HardwareComponent, HardwareComponent)
	
    type RemoteChannel
    RemoteConnection(SoftwareModule, RemoteChannel, SoftwareModule)
	
    type Network
    ComponentLocation(HardwareComponent): Network
    Protected(Network)
	
    //----------------------------------------------------------------------------
    // Stakeholders
    //----------------------------------------------------------------------------		
	
    // The different usergroups in the system
    type User
    Attacker(User)
	
    CanAccess(User,HardwareComponent)
	
    //----------------------------------------------------------------------------
    // Component and Module Vulnerabilities
    //----------------------------------------------------------------------------	
  
    // Vulnerabilities or weaknesses
    type Vulnerability constructed from {ArbitraryCodeExecution, ArbitraryMemoryWrite, BruteForcePassword, BufferOverflow, CleartextPassword, Compromised, CrossSiteScripting, DataLeakage, DefaultPassword, DictionaryPassword, DirectoryTraversal, DLLHijacking, DoS, EavesDrop, FewCharacterTypes, FormatString, HardcodedRSAKey, HeapOverflow, ImproperInputValidation, InformationDisclosure, InsecureHash, InsecureMethodCall, InsecurePasswordEncryption, InsecurePasswordStorage, IntegerOverflow, LossOfIntegrity, ManInTheMiddle, MemoryCorruption, OpenPorts, OutOfBoundsRead, OverwriteArbitraryFile, PlaintextAuthentication, PrivilegeEscalation, RemoteCodeExecution, RemoteHeapCorruption, ReplayAttack, RPCExploit, Sabotage, ShortPassword, Spoof, StackOverflow, StructuredExceptionHandler, UnauthenticatedSQL, UnauthorizedAccess, UnsafeMediaAccess, UnusedServices, UseAfterFree}
    HasVulnerability(SystemPart, Vulnerability)
	
    // Predicates used to model the ICS CERT vulnerability database
    CertTupleALL(Product,Version,Vulnerability)
    CertTupleEQ(Product,Version,Vulnerability)
    CertTupleGT(Product,Version,Vulnerability)
    CertTupleLT(Product,Version,Vulnerability)
	
    // Predicates used to model the SCADA Strangelove group vulnerability database
    DefaultCredentialsTupleALL(Product,Version)	
    DefaultCredentialsTupleEQ(Product,Version)	
    DefaultCredentialsTupleGT(Product,Version)	
    DefaultCredentialsTupleLT(Product,Version)	
	
    // Helper predicates used to order versions
    LowerVersion(Version,Version)
    EqualVersion(Version,Version)
    HigherVersion(Version,Version)
	
    // Used to link component vulnerabilities to system vulnerabilities
    HasDoSVuln(SystemPart)
    HasPrivilegeEscalationVuln(SoftwareModule)
    HasAuthCompromisedVuln(SoftwareModule)
    HasCodeExecutionVuln(SoftwareModule)
    HasDataLeakageVuln(HardwareComponent)

    // Simulations
    SimulateDoS(SystemPart)
    SimulatePrivilegeEscalation(SoftwareModule)
    SimulateAuthCompromised(SoftwareModule)
    SimulateCodeExecution(SoftwareModule)
    SimulateDataLeakage(HardwareComponent)
	
    // Vulnerability Categories
    DenialOfService(SystemPart)
    PrivilegeEscalation(SoftwareModule)
    AuthCompromised(SoftwareModule)
    CodeExecution(SoftwareModule)
    DataLeakage(HardwareComponent)
 	
    //----------------------------------------------------------------------------
    // CPS Process
    //----------------------------------------------------------------------------
	
    // Parameters of the process
    type Parameter
    type EnvironmentVariable isa Parameter
    type ActuatorStatus isa Parameter
    type Threshold isa Parameter
 	
    // Sensors and what they measure
    Measure(HardwareComponent,EnvironmentVariable)
 	
    // Operations and permissions
    type Operation constructed from {Read, Modify}
    Permission(User, Parameter, Operation)
	
    // Process tasks
    StorageTask(HardwareComponent, Parameter)
    ControlTask(SoftwareModule,Parameter)
    CommunicationTask(HardwareComponent, Parameter, HardwareComponent)
	
    // Helper predicates
    ModifyParameter(User, SoftwareModule, Parameter)
    ReadParameter(User, Parameter)
	
    // Output
    CompromisedStorageTask(HardwareComponent, Parameter)
    CompromisedControlTask(SoftwareModule, Parameter)
    CompromisedCommunicationTask(HardwareComponent, Parameter, HardwareComponent)

    //----------------------------------------------------------------------------
    // Authentication and Authorization
    //----------------------------------------------------------------------------
 	
    // Credentials that are stored to confirm authentication
    type Credential 
	
    type Password isa Credential
    type Token isa Credential 
 	
    // Tokens required for physical access to components
    TokenRequired(HardwareComponent, Token)
	
    // Ways of storing passwords
    type StorageMethod constructed from{ClearText,Verifiable}
    Storage(HardwareComponent, Password, StorageMethod)
 	
    // Authorization on software
    Authorization(Password, SoftwareModule, Parameter, Operation)
 	
    // Authentication predicates
    Authentication(SoftwareModule, Password)
 	
    // Auth chains between modules
    ModulePrerequisite(SoftwareModule,SoftwareModule)
    ModulePrerequisiteChain(SoftwareModule,SoftwareModule)
	
    // Credentials a user possesses
    HasCredential(User, Credential)
	
    // Helper predicates
    // A predicate that expresses the user owns the credential required to authenticate to a module
    CanAuthenticate(User, SoftwareModule)
 	
    // A predicate expressing that a user is authorized to perform an operation on a parameter from a software module
    IsAuthorized(User, SoftwareModule, Parameter, Operation)
	
    // A predicate which indicates that a module requires no credential to authenticate to it
    NoCred(SoftwareModule)
	
    // A predicate used to model that a user has obtained a credential which is not in his initial Credential SetId
    ObtainsCredential(User, Credential)
	
    // A predicate expressing that a user has physical access to a component
    PhysicalAccess(User, HardwareComponent)
	
    // A predicate expressing that a user has remote access to a component. This entails that the user has access to the network the component is located in, or there is a remote connection from a component in a different network which can be used
    RemoteAccess(User, HardwareComponent)
	
    //A predicate expressing that a user has access to a network, which entails he has access to one of the components in the network
    NetworkAccess(User, Network)
	
    // A predicate expressing that a user has access to a component, either physical or remote
    Access(User, HardwareComponent)

 }
 
 theory T : V {
 	
    //----------------------------------------------------------------------------
    // Component vulnerabilities
    //---------------------------------------------------------------------------- 	
 	
    {
 	
    // ICS CERT Alerts
    ! x[SystemPart] y[Vulnerability] : HasVulnerability(x,y) <- ? p[Product] v[Version] v2[Version] : (ComponentSpec(x,p,v) & CertTupleEQ(p,v2,y) & EqualVersion(v,v2)).   
        
    ! x[SystemPart] y[Vulnerability] : HasVulnerability(x,y) <- ? p[Product] v[Version] v2[Version] : (ComponentSpec(x,p,v) & CertTupleLT(p,v2,y) & LowerVersion(v,v2)).  
        
    ! x[SystemPart] y[Vulnerability] : HasVulnerability(x,y) <- ? p[Product] v[Version] v2[Version] : (ComponentSpec(x,p,v) & CertTupleGT(p,v2,y) & HigherVersion(v,v2)).  
        
    ! x[SystemPart] y[Vulnerability] : HasVulnerability(x,y) <- ? p[Product] v[Version] v2[Version] : (ComponentSpec(x,p,v) & CertTupleALL(p,v2,y)).  
	
    ! x[SystemPart] y[Vulnerability] : HasVulnerability(x,y) <- ? p[Product] v[Version] v2[Version] : (ModuleSpec(x,p,v) & CertTupleEQ(p,v2,y) & EqualVersion(v,v2)).   
        
    ! x[SystemPart] y[Vulnerability] : HasVulnerability(x,y) <- ? p[Product] v[Version] v2[Version] : (ModuleSpec(x,p,v) & CertTupleLT(p,v2,y) & LowerVersion(v,v2)).  
        
    ! x[SystemPart] y[Vulnerability] : HasVulnerability(x,y) <- ? p[Product] v[Version] v2[Version] : (ModuleSpec(x,p,v) & CertTupleGT(p,v2,y) & HigherVersion(v,v2)).  
        
    ! x[SystemPart] y[Vulnerability] : HasVulnerability(x,y) <- ? p[Product] v[Version] v2[Version] : (ModuleSpec(x,p,v) & CertTupleALL(p,v2,y)).  
        
    // Scadastrangelove components
    ! x[SystemPart] : HasVulnerability(x,DefaultPassword) <- ? p[Product] v[Version] v2[Version] : (ComponentSpec(x,p,v) & DefaultCredentialsTupleEQ(p,v2,y) & EqualVersion(v,v2)).   
        
    ! x[SystemPart] : HasVulnerability(x,DefaultPassword) <- ? p[Product] v[Version] v2[Version] : (ComponentSpec(x,p,v) & DefaultCredentialsTupleLT(p,v2,y) & LowerVersion(v,v2)).  
        
    ! x[SystemPart] : HasVulnerability(x,DefaultPassword) <- ? p[Product] v[Version] v2[Version] : (ComponentSpec(x,p,v) & DefaultCredentialsTupleGT(p,v2,y) & HigherVersion(v,v2)).  
        
    ! x[SystemPart] : HasVulnerability(x,DefaultPassword) <- ? p[Product] v[Version] v2[Version] : (ComponentSpec(x,p,v) & DefaultCredentialsTupleALL(p,v2,y)).  
	
    ! x[SystemPart] : HasVulnerability(x,DefaultPassword) <- ? p[Product] v[Version] v2[Version] : (ModuleSpec(x,p,v) & DefaultCredentialsTupleEQ(p,v2,y) & EqualVersion(v,v2)).   
        
    ! x[SystemPart] : HasVulnerability(x,DefaultPassword) <- ? p[Product] v[Version] v2[Version] : (ModuleSpec(x,p,v) & DefaultCredentialsTupleLT(p,v2,y) & LowerVersion(v,v2)).  
        
    ! x[SystemPart] : HasVulnerability(x,DefaultPassword) <- ? p[Product] v[Version] v2[Version] : (ModuleSpec(x,p,v) & DefaultCredentialsTupleGT(p,v2,y) & HigherVersion(v,v2)).  
        
    ! x[SystemPart] : HasVulnerability(x,DefaultPassword) <- ? p[Product] v[Version] v2[Version] : (ModuleSpec(x,p,v) & DefaultCredentialsTupleALL(p,v2,y)).  
	 
    // Rules to order versions
    // Equal Versions
    ! x[VersionInt] y[VersionInt] : EqualVersion(Version(x),Version(y)) <- x = y.
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt]: EqualVersion(Version(x,a),Version(y,b)) <- x = y & a = b.
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt]: EqualVersion(Version(x,a,c),Version(y,b,c)) <- x = y & a = b & c = d.
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt] e[VersionInt] f[VersionInt]: EqualVersion(Version(x,a,c,e),Version(y,b,c,f)) <- x = y & a = b & c = d & e = f.
	 
    // Lower Versions
    ! x[VersionInt] y[VersionInt] : LowerVersion(Version(x),Version(y)) <- x < y.
	
    ! x[VersionInt] y[VersionInt] a[VersionInt]: LowerVersion(Version(x),Version(y,a)) <- x =< y.	
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt]: LowerVersion(Version(x),Version(y,a,b)) <- x =< y.	

    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt]: LowerVersion(Version(x),Version(y,a,b,c)) <- x =< y.		
	
    ! x[VersionInt] y[VersionInt] a[VersionInt]: LowerVersion(Version(x,a),Version(y)) <- x < y.
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt]: LowerVersion(Version(x,a),Version(y,b)) <- (x < y) | (x = y & a < b).	
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt]: LowerVersion(Version(x,a),Version(y,b,c)) <- (x < y) | (x = y & a =< b).

    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt]: LowerVersion(Version(x,a),Version(y,b,c,d)) <- (x < y) | (x = y & a =< b).		
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt]: LowerVersion(Version(x,a,b),Version(y)) <- x < y.
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt]: LowerVersion(Version(x,a,b),Version(y,c)) <- (x < y) | (x = y & a < c).
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt]: LowerVersion(Version(x,a,b),Version(y,c,d)) <- (x < y) | (x = y & a < c) | (x = y & a = c & b < d).

    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt] e[VersionInt]: LowerVersion(Version(x,a,b),Version(y,c,d,e)) <- (x < y) | (x = y & a < c) | (x = y & a = c & b =< d).
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt]: LowerVersion(Version(x,a,b,c),Version(y)) <- x < y.
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt]: LowerVersion(Version(x,a,b,c),Version(y,d)) <- (x < y) | (x = y & a < d).	
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt] e[VersionInt]: LowerVersion(Version(x,a,b,c),Version(y,d,e)) <- (x < y) | (x = y & a < d) | (x = y & a = d & b < e).	

    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt] e[VersionInt] f[VersionInt]: LowerVersion(Version(x,a,b,c),Version(y,d,e,f)) <- (x < y) | (x = y & a < d) | (x = y & a = d & b < e) | (x = y & a = d & b = e & c < f).

    // Higher Versions
    ! x[VersionInt] y[VersionInt] : HigherVersion(Version(x),Version(y)) <- x > y.
	
    ! x[VersionInt] y[VersionInt] a[VersionInt]: HigherVersion(Version(x),Version(y,a)) <- x > y.	
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt]: HigherVersion(Version(x),Version(y,a,b)) <- x > y.	

    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt]: HigherVersion(Version(x),Version(y,a,b,c)) <- x > y.		
	
    ! x[VersionInt] y[VersionInt] a[VersionInt]: HigherVersion(Version(x,a),Version(y)) <- x >= y.
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt]: HigherVersion(Version(x,a),Version(y,b)) <- (x > y) | (x = y & a > b).	
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt]: HigherVersion(Version(x,a),Version(y,b,c)) <- (x > y) | (x = y & a > b).

    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt]: HigherVersion(Version(x,a),Version(y,b,c,d)) <- (x > y) | (x = y & a > b).		
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt]: HigherVersion(Version(x,a,b),Version(y)) <- x >= y.
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt]: HigherVersion(Version(x,a,b),Version(y,c)) <- (x > y) | (x = y & a >= c).
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt]: HigherVersion(Version(x,a,b),Version(y,c,d)) <- (x > y) | (x = y & a > c) | (x = y & a = c & b > d).

    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt] e[VersionInt]: HigherVersion(Version(x,a,b),Version(y,c,d,e)) <- (x > y) | (x = y & a > c) | (x = y & a = c & b > d).
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt]: HigherVersion(Version(x,a,b,c),Version(y)) <- x >= y.
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt]: HigherVersion(Version(x,a,b,c),Version(y,d)) <- (x > y) | (x = y & a >= d).	
	
    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt] e[VersionInt]: HigherVersion(Version(x,a,b,c),Version(y,d,e)) <- (x > y) | (x = y & a > d) | (x = y & a = d & b >= e).	

    ! x[VersionInt] y[VersionInt] a[VersionInt] b[VersionInt] c[VersionInt] d[VersionInt] e[VersionInt] f[VersionInt]: HigherVersion(Version(x,a,b,c),Version(y,d,e,f)) <- (x > y) | (x = y & a > d) | (x = y & a = d & b > e) | (x = y & a = d & b = e & c > f).		
    }
 	
    //----------------------------------------------------------------------------
    // Linking component vulnerabilities to impact categories
    //----------------------------------------------------------------------------
 	
    {
        
    ! x[SystemPart] : HasDoSVuln(x) <- HasVulnerability(x,DoS) | HasVulnerability(x,BufferOverflow) | HasVulnerability(x,HeapOverflow) | HasVulnerability(x,ImproperInputValidation) | HasVulnerability(x,MemoryCorruption) | HasVulnerability(x,OutOfBoundsRead) | HasVulnerability(x,OverwriteArbitraryFile) | HasVulnerability(x,RemoteHeapCorruption).
        
    ! x[SystemPart] : HasCodeExecutionVuln(x) <- HasVulnerability(x,ArbitraryCodeExecution) | HasVulnerability(x,CrossSiteScripting) | HasVulnerability(x,DLLHijacking) | HasVulnerability(x,FormatString) | HasVulnerability(x,IntegerOverflow) | HasVulnerability(x,RemoteCodeExecution) | HasVulnerability(x,RPCExploit) | HasVulnerability(x,StackOverflow) | HasVulnerability(x,StructuredExceptionHandler) | HasVulnerability(x,UnauthenticatedSQL) | HasVulnerability(x,UseAfterFree).
        
    ! x[SystemPart] : HasAuthCompromisedVuln(x) <- HasVulnerability(x,BruteForcePassword) | HasVulnerability(x,DefaultPassword) | HasVulnerability(x,CleartextPassword) | HasVulnerability(x,DictionaryPassword) | HasVulnerability(x,InsecureHash) | HasVulnerability(x,InsecurePasswordStorage) | HasVulnerability(x,InsecurePasswordEncryption) | HasVulnerability(x,PlaintextAuthentication) | HasVulnerability(x,ReplayAttack).
        
    ! x[SystemPart] : HasDataLeakageVuln(x) <- HasVulnerability(x,DataLeakage) | HasVulnerability(x,DirectoryTraversal) | HasVulnerability(x,HardcodedRSAKey) | HasVulnerability(x,InformationDisclosure) | HasVulnerability(x,InsecureMethodCall) | HasVulnerability(x,LossOfIntegrity).
        
    ! x[SystemPart] : HasPrivilegeEscalationVuln(x) <- HasVulnerability(x,PrivilegeEscalation) | HasVulnerability(x,UnauthorizedAccess).

    ! x[SystemPart] : DenialOfService(x) <- SimulateDoS(x) | HasDoSVuln(x).
    
    ! x[SystemPart] : CodeExecution(x) <- SimulateCodeExecution(x) | HasCodeExecutionVuln(x).
    
    ! x[SystemPart] : AuthCompromised(x) <- SimulateAuthCompromised(x) | HasAuthCompromisedVuln(x).
    
    ! x[SystemPart] : DataLeakage(x) <- SimulateDataLeakage(x) | HasDataLeakageVuln(x).
    
    ! x[SystemPart] : PrivilegeEscalation(x) <- SimulatePrivilegeEscalation(x) | HasPrivilegeEscalationVuln(x).	
    }

    //----------------------------------------------------------------------------
    // Storage task vulnerabilities
    //----------------------------------------------------------------------------
    
    {
    
    ! c[HardwareComponent] p[Parameter] : CompromisedStorageTask(c,p) <- StorageTask(c,p) & DataLeakage(c).
    
    }
      
    //----------------------------------------------------------------------------
    // Control task vulnerabilities
    //----------------------------------------------------------------------------
    
    {
    
    ! m[SoftwareModule] p[Parameter] : CompromisedControlTask(m,p) <- ControlTask(m,p) & (CodeExecution(m) | DenialOfService(m)).
	
    ! x[HardwareComponent] m[SoftwareModule] p[Parameter] : CompromisedControlTask(m,p) <- ControlTask(m,p) & LocatedIn(m) = x & DenialOfService(x).
    
    ! m[SoftwareModule] p[Parameter] : CompromisedControlTask(m,p) <- ? n[SoftwareModule] : (ControlTask(m,p) & ModulePrerequisiteChain(m,n) & DenialOfService(n)).
	
    // Transitive closure of module prerequisites
    ! m[SoftwareModule] n[SoftwareModule] : ModulePrerequisiteChain(m,n) <- ModulePrerequisite(m,n).
    ! m[SoftwareModule] n[SoftwareModule] : ModulePrerequisiteChain(m,n) <- ? l[SoftwareModule] : ModulePrerequisite(m,l) & ModulePrerequisite(l,n).
	
    }
      	  
    //----------------------------------------------------------------------------
    // Communication task vulnerabilities
    //----------------------------------------------------------------------------
    
    {
    
    ! x[HardwareComponent] y[HardwareComponent] p[Parameter] : CompromisedCommunicationTask(x,p,y) <- CommunicationTask(x,p,y) & (DenialOfService(x) | DenialOfService(y)).
    
    ! x[HardwareComponent] y[HardwareComponent] p[Parameter] : CompromisedCommunicationTask(x,p,y) <- ~Path(x,y)        
    
    // Determination of Paths
    ! x[HardwareComponent] z[HardwareComponent] : Path(x,z) <- ? y[PhysicalChannel] : PhysicalConnection(x,y,z).
    ! x[HardwareComponent] z[HardwareComponent] : Path(x,z) <- ? y[HardwareComponent] : Path(x,y) & Path(y,z).
	  
    }
        
    //----------------------------------------------------------------------------
    // Authentication & Authorization rules
    //----------------------------------------------------------------------------
    
    {
 	
    // Rule for modifying parameters
    ! u[User] m[SoftwareModule] p[Parameter] : ModifyParameter(u,m,p) <- (? x[HardwareComponent] : LocatedIn(m) = x & Access(u,x) & ControlTask(m,p) & CanAuthenticate(u,m) & IsAuthorized(u,m,p,Modify) & ~CompromisedControlTask(m,p)).
 	
    // Authentication to software modules
    ! u[User] m[SoftwareModule] n[SoftwareModule] c[Password] : CanAuthenticate(u,m) <- ((Authentication(m,c) => (ObtainsCredential(u,c) | AuthCompromised(m)) & (ModulePrerequisite(m,n) => CanAuthenticate(u,n))).
	
    // Obtaining credentials
    ! c[Credential] u[User] : ObtainsCredential(u,c) <- HasCredential(u,c) | (? x[HardwareComponent] : Storage(x,c,ClearText) & Access(u,x) & DataLeakage(x)).
	
    // Gaining access to components
    ! u[User] x[HardwareComponent] : Access(u,x) <- PhysicalAccess(u,x) | RemoteAccess(u,x).
	
    // Gaining Physical access to components
    ! u[User] x[HardwareComponent] t[Token] : PhysicalAccess(u,x) <- CanAccess(u,x) & (TokenRequired(x,t) => ObtainsCredential(u,t)).
	
    // Gaining remote access to components
    ! u[User] x[HardwareComponent] : RemoteAccess(u,x) <- (? y[HardwareComponent] m[SoftwareModule] n[SoftwareModule] l[RemoteChannel] : RemoteConnection(m,l,n) & LocatedIn(n) = x & LocatedIn(m) = y & Access(u,y)).
	
    // NetworkAccess
    ! u[User] n[Network] : NetworkAccess(u,n) <- (? x[HardwareComponent] : ComponentLocation(x)=n & Access(u,x)).

    }
    
}
    
Theory T2 : V{
    //----------------------------------------------------------------------------
    // Queries
    //----------------------------------------------------------------------------    
        
    // Only authorized users can modify parameters
    ! u[User] p[Parameter] : ( ? m[SoftwareModule] : ModifyParameter(u,m,p)) <=> Permission(u,p,Modify).
    
    // Only authorized users can read parameters
    ! u[User] p[Parameter] : ReadParameter(u,p) <=> Permission(u,p,Read).
	
    // No users can obtain credentials that were not assigned to them
    ! u[User] c[Credential] : ObtainsCredential(u,c) => HasCredential(u,c).
	
    // Attackers cannot gain access to protected networks
    ! u[user] n[Network] : Protected(n) & Attacker(u) => ~NetworkAccess(u,n).
	
    // Attackers cannot gain physical access to critical hardware components
    ! u[User] x[HardwareComponent] : Critical(x) & Attacker(u) => ~PhysicalAccess(u,x)
}
 
procedure main() {
    stdoptions.nbmodels = 1
    stdoptions.nrpropsteps=0
    local x = os.clock()
    result = modelexpand(T,S)

    printmodels(result)

    local elapsed_time = os.clock() - x
    if (not sat(T2,result[1])) then printunsatcore(T2,result[1]) end
    if (not sat(T3,result[1])) then printunsatcore(T3,result[1]) end
    print(string.format("Elapsed time to find models : %.2f sec", elapsed_time))
}
